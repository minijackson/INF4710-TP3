\documentclass[12pt,a4paper]{article}

\usepackage[utf8]{inputenc}
\usepackage[T1]{fontenc}
\usepackage[french]{babel}
\usepackage[hidelinks]{hyperref}
\hypersetup{pdfencoding=auto}
\usepackage{amsmath}
%\usepackage{nath}
\usepackage{fullpage}
\raggedbottom
\usepackage{microtype}
\usepackage{biblatex}
\usepackage{booktabs}
\usepackage{graphicx}

%\usepackage{dirtree}

\addbibresource{R.bib}

\usepackage{fontspec}
\setmonofont[Scale=0.8]{Fira Code}
\usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
\usepackage{minted}
\usepackage[colorinlistoftodos]{todonotes}

% Light Theme
\usemintedstyle{tomorrow}
\definecolor{bg}{rgb}{0.95,0.95,0.95}

% Dark Dracula Theme
%\usemintedstyle{dracula}
%\definecolor{bg}{rgb}{0.207843, 0.219608, 0.27451}

\setminted{linenos,bgcolor=bg,tabsize=4,breaklines}

\renewcommand\listingscaption{Extrait de code}
\renewcommand\listoflistingscaption{Liste des extraits de code}

\author{Rémi \textsc{Nicole} \and Stéphane \textsc{Tzvetkov}}
\title{}

\begin{document}

\maketitle

%~\clearpage

<<echo=F>>=
library(rjson)
library(purrr)
library(dplyr)
library(ggplot2)
library(knitr)
@

<<>>=
random_fixtures <- c("BlockRandomImageFixture",
                     "EDTV480RandomImageFixture",
                     "EDTV576RandomImageFixture",
                     "HDTV720RandomImageFixture",
                     "HDTV1080RandomImageFixture")
random_images <- c("3×3", "480p", "576p", "720p", "1080p")
fixed_fixtures <- c("AirplaneFixedImageFixture",
                    "BaboonFixedImageFixture",
                    "CameramanFixedImageFixture",
                    "LenaFixedImageFixture",
                    "LogoNoiseFixedImageFixture",
                    "LogoFixedImageFixture",
                    "PeppersFixedImageFixture")
fixed_images <- c("Airplane", "Baboon", "Cameraman", "Lena", "Logo Noise",
                  "Logo", "Peppers")

threshold_components <- c("intensity", "value", "lightness", "luma",
                          "luma_rounded")
threshold_par_components <- paste(threshold_components, "_gnupar", sep="")
threshold_benchs <- c(threshold_components, threshold_par_components)

threshold_component_base_names <- c("Intensité", "Valeur", "Luminosité",
                                    "Luma tronqué", "Luma arrondi")
threshold_component_names <- rep(threshold_component_base_names, 2)

fixtures <- c(random_fixtures, fixed_fixtures)
images <- c(random_images, fixed_images)

threshold_components <-
  fromJSON(file="../build-release/threshold_components.json")
threshold_components.images <- threshold_components$benchmarks %>%
  modify("fixture") %>%
  unlist %>%
  factor(levels=fixtures, labels=images)

threshold_components.components <- threshold_components$benchmarks %>%
  modify("name") %>%
  unlist %>%
  factor(levels=threshold_benchs)
levels(threshold_components.components) <- threshold_component_names

threshold_components.means <- threshold_components$benchmarks %>%
  modify("mean") %>%
  unlist
threshold_components.stddev <- threshold_components$benchmarks %>%
  modify("std_dev") %>%
  unlist
threshold_components.is_parallel <- threshold_components$benchmarks %>%
  modify("name") %>%
  unlist %>%
  endsWith("_gnupar") %>%
  factor(levels=c(FALSE, TRUE), labels=c("Non", "Oui"))

threshold_data <- data.frame(Image=threshold_components.images,
                             Component=threshold_components.components,
                             Mean=threshold_components.means,
                             StdDev=threshold_components.stddev,
                             Parallel=threshold_components.is_parallel)
threshold_data.random <- filter(threshold_data, Image %in% random_images)
threshold_data.fixed <- filter(threshold_data, Image %in% fixed_images)
@

<<fig.cap="Performance du seuillage en fonction du composant de luminosité", fig.pos="H">>=
ggplot(threshold_data.random,
       aes(x=Image, y=Mean,
           group=interaction(Component, Parallel),
           color=Component,
           linetype=Parallel)) +
  labs(y="Moyenne du temps d'exécution",
       color="Composant de luminosité",
       linetype="Parallélisme") +
  theme(legend.position=c(.2, .77)) +
  geom_point() +
  geom_line()
@

<<fig.cap="Performance du seuillage sur images réelles", fig.pos="H">>=
ggplot(threshold_data.fixed, aes(x=Component,
                                 y=Mean,
                                 fill=Parallel)) +
  labs(x="Composant de luminosité",
       y="Moyenne du temps d'exécution",
       fill="Parallélisme") +
  theme(legend.position="top") +
  geom_bar(stat="identity") +
  coord_flip() +
  guides(fill=guide_legend(reverse=TRUE)) +
#  geom_errorbar(aes(ymin=Mean - StdDev, ymax=Mean + StdDev), width=.3) +
  facet_wrap(~ Image)
@

<<>>=
threshold_implementations_names <- c("mono_threaded",
                                     "gnu_parallel",
                                     "opencl",
                                     "opencv")
threshold_implementations_display_names <- c("Non parallélisé",
                                             "Parallélisé",
                                             "Carte graphique",
                                             "Référence (OpenCV)")

threshold_implementations <-
  fromJSON(file="../build-release/threshold_implementations.json")
threshold_implementations.images <-
  threshold_implementations$benchmarks %>%
  modify("fixture") %>%
  unlist %>%
  factor(levels=fixtures, labels=images)
threshold_implementations.means <-
  threshold_implementations$benchmarks %>%
  modify("mean") %>%
  unlist
threshold_implementations.implementations <-
  threshold_implementations$benchmarks %>%
  modify("name") %>%
  unlist %>%
  factor(levels=threshold_implementations_names,
         labels=threshold_implementations_display_names)

threshold_data <-
  data.frame(Image=threshold_implementations.images,
             Implementation=threshold_implementations.implementations,
             Mean=threshold_implementations.means)
@

<<fig.cap="Comparaison entre les implémentations du seuillage", fig.pos="H">>=
ggplot(threshold_data, aes(x=Implementation, y=Mean)) +
  labs(x="Implémentation", y="Moyenne du temps d'exécution") +
  geom_bar(stat="identity") +
  coord_flip() +
  facet_wrap(~ Image)
@

<<>>=
dilation_imp_names <- c("mono_threaded",
                                     "openmp",
                                     "opencv")
dilation_imp_display_names <- c("Non parallélisé",
                                             "Parallélisé",
                                             "Référence (OpenCV)")

dilation <- fromJSON(file="../build-release/dilation.json")
dilation.images <-
  dilation$benchmarks %>%
  modify("fixture") %>%
  unlist %>%
  factor(levels=paste("Threshed", fixtures, sep=""), labels=images)
dilation.means <-
  dilation$benchmarks %>%
  modify("mean") %>%
  unlist
dilation.implementations <-
  dilation$benchmarks %>%
  modify("name") %>%
  unlist %>%
  factor(levels=dilation_imp_names,
         labels=dilation_imp_display_names)

dilation_data <-
  data.frame(Image=dilation.images,
             Implementation=dilation.implementations,
             Mean=dilation.means)
@


<<fig.cap="Comparaison entre les implémentations du seuillage", fig.pos="H">>=
ggplot(dilation_data, aes(x=Implementation, y=Mean)) +
  labs(x="Implémentation", y="Moyenne du temps d'exécution") +
  geom_bar(stat="identity") +
  coord_flip() +
  facet_wrap(~ Image)
@

\tableofcontents

\listoflistings%
\listoffigures
\listoftables

<<echo=FALSE>>=
write_bib(sub("^.*/", "", grep("^/", searchpaths(), value=TRUE)),
          file="R.bib")
@

\nocite{*}
\printbibliography%

\end{document}
